<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_VRC_Test" Id="{28f055fd-f5c0-4307-957c-f7993195c167}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_VRC_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    VRC: FB_VRC;
    ex               : __SYSTEM.ExceptionCode;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[M_INIT();
M_Interlock();]]></ST>
    </Implementation>
    <Method Name="M_Check_State" Id="{a0a18af2-b8ab-43c8-9d60-82ae3d8d0bd1}">
      <Declaration><![CDATA[METHOD M_Check_State
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_INIT" Id="{3f7b8356-1b25-416f-9975-41838a39c6b2}">
      <Declaration><![CDATA[METHOD M_INIT : BOOL
VAR//_INPUT


    Interlock_OK :BOOL := TRUE;

    ex: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('VRC_Startup');
//__TRY
VRC(i_xExtILK_OK:= Interlock_OK, i_xOverrideMode:= , iq_stValve=> );
AssertFalse(VRC.iq_stValve.q_xOPN_DO,'VRC q_xOPN_DO is set to true');
AssertFalse(VRC.iq_stValve.pv_xOPN_SW,'VRC pv_xOPN_SW is set to true');
//__CATCH(ex)
//__FINALLY
TEST_FINISHED_NAMED('VRC_Startup');
//__ENDTRY

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Interlock" Id="{abf40c39-b4a6-4afd-ac77-461f84c0f1c0}">
      <Declaration><![CDATA[METHOD M_Interlock
VAR
    US_IG : ST_VG;
    DS_IG : ST_VG;

    VRC: FB_VRC;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('VRC_Interlock_Active');
VRC.M_Set_OPN_SW (TRUE);
VRC(i_xExtILK_OK:= FALSE, i_xOverrideMode:= , iq_stValve=> );
AssertFalse(VRC.iq_stValve.pv_xOPN_SW,'VRC open_SW is set to true');
AssertFalse(VRC.iq_stValve.q_xOPN_DO,'VRC open DO is set to true');
TEST_FINISHED_NAMED('VRC_Interlock_Active');

TEST('VRC_Interlock_OK');
VRC.M_Set_OPN_SW (TRUE);
VRC(i_xExtILK_OK:= TRUE, i_xOverrideMode:= , iq_stValve=> );
AssertTrue(VRC.iq_stValve.pv_xOPN_SW,'VRC open_SW is set to FALSE');
AssertTrue(VRC.iq_stValve.q_xOPN_DO,'VRC open DO is set to FALSE');
TEST_FINISHED_NAMED('VRC_Interlock_OK');

TEST('VRC_Interlock_Lost');
VRC(i_xExtILK_OK:= FALSE, i_xOverrideMode:= , iq_stValve=> );
AssertFalse(VRC.iq_stValve.pv_xOPN_SW,'VRC open_SW is set to true');
AssertFalse(VRC.iq_stValve.q_xOPN_DO,'VRC open DO is set to true');
TEST_FINISHED_NAMED('VRC_Interlock_Lost');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>