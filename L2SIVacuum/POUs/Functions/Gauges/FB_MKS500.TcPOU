<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MKS500" Id="{4da1e942-f359-4f6e-ab12-d5a0031e68e6}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function is for the Cold Cathode MKS 500.

If connected to Beckhoff EP boxes. Set the EP bit to TRUE, this is necessary for the
MKS500-to-EP box interface because the EP boxes do not natively support the 5v IO
signals on the MKS500 gauge.

A setup process is required for the MKS500 to be usable.
See here: https://confluence.slac.stanford.edu/display/PCDS/MKS+500+-+Cold+Cathode

This function provides ILK and Set Point Protection for the Cold Cathode.
*)

FUNCTION_BLOCK FB_MKS500 EXTENDS FB_GaugeBase
VAR_IN_OUT

END_VAR
VAR_INPUT
    PG	:	ST_VG;
    bEP : BOOL :=FALSE; // Set to True if This Gauge is connected to EP BOX and not EL Terminals
    tRecoverDelay:TIME:=T#600S; (*Delay Time after the first cycle to start the device. Default is 600S*)
END_VAR
VAR_OUTPUT
{attribute 'pytmc' := '
    pv:
    '}
    IG : ST_VG;
END_VAR
VAR
    rV : REAL;
    GaugeTurnOnTmr : TON;
    tStartupTimer:TON;
    iTermBits: UINT := 32767 ; // The terminal's maximum value in bits
    (*IOs to be linked*)
    /// Controls and I/Os
    i_iPRESS_R AT %I* :INT; // input Pressure // Link to analog Input
    q_xHV_DIS AT %Q* : BOOL; // Enable High Voltage when True // 'TcLinkTo' (EP2624) ^Output
    // only for EL and ES terminal
    i_xHV_ON AT %I*	: BOOL; //  True when High Voltage is on  // 'TcLinkTo' (EL1124) ^Input
    i_xDisc_Active AT %I* : BOOL;// Discharge Current Active // 'TcLinkTo' (EL1124) ^Input
    binit:BOOL:=TRUE;
END_VAR

VAR CONSTANT
    // Ranges has to match the configurator software
    pBase : REAL :=1.0E-10;//default curve base pressure is 1E-10. Confusing since can't actually read that low using analog out.
    vBase : REAL := 1;
    vDisconnected : REAL:= 0.5;
    vSlope : REAL := 1.0;
    vGaugeOff: REAL := 9.8;
    vNoDischarge: REAL := 9.3;
    MinPressure: REAL := 1E-10;
    cDefaultPressure : REAL := 0;
    rDeadband : REAL :=0.3;
END_VAR
VAR PERSISTENT
    bWasOn : BOOL;
    bAutoRecover:BOOL;
    bAutoRecoverWrite:BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Startup time*)
IF (bInit) THEN
    tStartupTimer.IN:=TRUE;
    bInit :=FALSE;
END_IF
tStartupTimer(PT:=T#3S);

(* 500 Logarithmic Output Conversion, factory default configuration *)
If (iTermBits=0) THEN iTermBits := 32767;END_IF
rV := 10*INT_TO_REAL(IG.i_iPRESS_R)/iTermBits;

(* Set Guage State based on the Analog voltage*)
IF  NOT (tStartupTimer.Q) THEN // Give time for the gauge controller to start
    IG.eState := Off;
    IG.rPRESS := cDefaultPressure;
ELSIF rV < vDisconnected THEN
    IG.eState := GaugeDisconnected;
    IG.rPRESS := cDefaultPressure;
ELSIF rV >= vDisconnected AND rV < (vNoDischarge -rDeadband)  AND (IG.xHV_SW) THEN
    IG.eState := Valid;
    IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
ELSIF rV >= (vNoDischarge -rDeadband) AND rV <(vGaugeOff -rDeadband) AND (IG.xHV_SW)  THEN
    IG.eState := Starting;
    IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
ELSIF rV >= (vGaugeOff -rDeadband) THEN
    IG.eState := Off;
    //IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
    IG.rPRESS := cDefaultPressure;
ELSIF IG.rPRESS < MinPressure THEN
    IG.eState := PressInvalid;
    //IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
    IG.rPRESS := cDefaultPressure;
END_IF

(* Set Guage State based on the inputs HV ON and Discharge current*)
If (NOT bEP) THEN
    IF IG.i_xHV_ON AND NOT IG.i_xDisc_Active THEN
        IG.eState := Starting;
        IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
    ELSIF IG.i_xHV_ON AND IG.i_xDisc_Active THEN
        IG.eState := Valid;
        IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
    ELSIF NOT IG.i_xHV_ON AND NOT IG.i_xDisc_Active THEN
        IG.eState := Off;
        IG.rPRESS := cDefaultPressure;
    END_IF
END_IF

(* Ion Gauge Protection Functions *)
(* If the PG pressure is greater than the VG.PRO_SP then the gauge is disabled *)
(* If the PG pressure is less than the VG.PRO_SP then the gauge is enabled *)
(* This FB also implements some hysteresis so the gauge doesn't have rapid power cycling while near the turn on boundary *)


IF PG.rPRESS <= IG.rPRO_SP AND PG.xPRESS_OK THEN
    IG.q_xHV_DIS := IG.xHV_SW;
    IG.xILKOk := TRUE;
ELSIF IG.q_xHV_DIS THEN
    IF IG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR)  OR PG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR) THEN
        IG.q_xHV_DIS := FALSE;
        IG.xHV_SW := FALSE;
    END_IF
ELSE
    IG.q_xHV_DIS := FALSE;
    IG.xHV_SW := FALSE;
    IG.xILKOk := FALSE;
END_IF

(* Pressure gauge OK checks *)

GaugeTurnOnTmr(IN:=IG.q_xHV_DIS, PT:=T#10S, Q=>IG.xTurnOnTime);


//Backwards compatibility
IG.xPRESS_OK := (IG.eState = Valid) OR IG.xBAKEOUT;

(* Setpoint evaluation *)
IG.xAT_VAC := (IG.xPRESS_OK AND (IG.rPRESS < IG.rVAC_SP)) OR IG.xBAKEOUT AND (IG.eState = Valid) ;

ACT_Logger();
(*Soft IO Linking*)
// check ethercat Diagnostics
IO();
(*Load or save the persistent variables*)
ACT_Persistent();
(*Run Auto Recovery*)
ACT_Recover();]]></ST>
    </Implementation>
    <Action Name="ACT_Logger" Id="{b6ae699a-8cbc-41c3-94fc-93d1d486cd97}">
      <Implementation>
        <ST><![CDATA[// ILK logger
IF (IG.xLog) THEN
    IF NOT IG.xILKOk AND IG.q_xHV_DIS THEN
            fbLogger(sMsg:='Lost external interlock while gauge was on.', eSevr:=TcEventSeverity.Critical);
    END_IF


    // Log Action
    tAction(CLK:=   IG.xHV_SW);
    IF tAction.Q THEN fbLogger(sMsg:='Ion gauge commanded to switch on', eSevr:=TcEventSeverity.Info); END_IF



    //STATE Logger
    tState(CLK:=  ePrevState <> IG.eState);
    IF ePrevState <> IG.eState THEN
          CASE IG.eState OF
            ValidHi:
                fbLogger(sMsg:='Gauge pressure valid high.', eSevr:=TcEventSeverity.Info);
            ValidLo:
                fbLogger(sMsg:='Gauge pressure valid low.', eSevr:=TcEventSeverity.Info);
            Valid:
                fbLogger(sMsg:='Gauge pressure valid.', eSevr:=TcEventSeverity.Info);
            GaugeDisconnected:
                fbLogger(sMsg:='Gauge Disconnected.', eSevr:=TcEventSeverity.Critical);
            PressInvalid:
                fbLogger(sMsg:='Gauge pressure invalid.', eSevr:=TcEventSeverity.Warning);
            OoR:
                fbLogger(sMsg:='Gauge pressure out of range.', eSevr:=TcEventSeverity.Warning);
            Starting:
                fbLogger(sMsg:='Gauge starting.', eSevr:=TcEventSeverity.Info);
          END_CASE
          ePrevState := IG.eState;
          stateTimer.IN := TRUE;
      END_IF
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Persistent" Id="{7b67b417-7fe6-4878-b86c-b0f446c06db2}">
      <Implementation>
        <ST><![CDATA[(*On first PLC pass, load the persistent value into the structrue variable*)
IF (SUPER^.bRestorePersistentData) THEN
    SUPER^.bRestorePersistentData	:= FALSE;
    IF ( rVAC_SP <> 0) THEN
        IG.rVAC_SP := rVAC_SP;
    END_IF;
    IF ( rPRO_SP <> 0) THEN
        IG.rPRO_SP := rPRO_SP;
    END_IF;
    IF ( rHYS_PR <> 0) THEN
        IG.rHYS_PR := rHYS_PR;
    END_IF;
    IF ( bAutoRecoverWrite) THEN
        IG.xAutoOn := bAutoRecover;
    END_IF;
END_IF
(*Check if a new value has been written in the structure variable copy it to the persistent variable*)
IF NOT (IG.rVAC_SP = rVAC_SP)  THEN
    rVAC_SP := IG.rVAC_SP;
END_IF;

IF NOT (IG.rPRO_SP = rPRO_SP) THEN
    rPRO_SP:= IG.rPRO_SP;
END_IF;

IF NOT (IG.rHYS_PR = rHYS_PR) THEN
    rHYS_PR:= IG.rHYS_PR;
END_IF;

IF NOT(bAutoRecoverWrite) OR NOT (bAutoRecover = IG.xAutoOn) THEN
    bAutoRecover := IG.xAutoOn;
    bAutoRecoverWrite := TRUE;
END_IF;
stateTimer(PT:=T#10S);
IF (stateTimer.Q) THEN
    bWasOn := (IG.eState >=Valid );
    stateTimer.IN := FALSE;
    fbWritePersistentData(NETID:='', PORT:=851, START:=TRUE, TMOUT:=T#1s );
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Recover" Id="{ac0dd076-6f0a-4fff-a772-7158a547a40b}">
      <Implementation>
        <ST><![CDATA[fbGetCurTaskIdx();
IF (TwinCAT_SystemInfoVarList._TaskInfo[fbGetCurTaskIdx.index].FirstCycle) THEN
    tRecover.IN := TRUE;
END_IF
tRecover(IN:= , PT:=tRecoverDelay);
IF NOT(bAutoRecoverWrite) OR (tRecover.Q AND bAutoRecover ) THEN
    This^.M_Recover();
    tRecover.IN := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="IO" Id="{8ad71ac6-f961-40c8-a3be-ad3367f81f67}">
      <Implementation>
        <ST><![CDATA[(*soft link inputs*)
IG.i_iPRESS_R:=	i_iPRESS_R;
IG.i_xHV_ON:= i_xHV_ON;
IG.i_xDisc_Active:=i_xDisc_Active;
(*soft link outputs*)
q_xHV_DIS := IG.q_xHV_DIS;

IG.sPath := sPath;
IG.iAutoOnTimer:= TIME_TO_INT(tRecover.PT);]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_HVE" Id="{5c5dd30f-1cf9-426d-9ab9-5103df771146}">
      <Declaration><![CDATA[METHOD M_HVE : BOOL
VAR_INPUT
        enable:bool; // set to true to enable, false to disable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
this^.IG.xHV_SW:= enable;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Recover" Id="{85a6a232-db83-4051-b21c-4614d4685f78}">
      <Declaration><![CDATA[METHOD M_Recover : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[This^.M_HVE(This^.bWasOn);
M_Recover := bWasOn;
IF (bWasOn) THEN fbLogger(sMsg:='Auto Recovery Initiated.', eSevr:=TcEventSeverity.Info); END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetBits" Id="{9316bb83-f8e3-4030-bdca-94efd01af2a5}">
      <Declaration><![CDATA[METHOD M_SetBits : BOOL
VAR_INPUT
    TermBits : UINT; // The terminal's maximum value in bits
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[This^.iTermBits := TermBits;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
