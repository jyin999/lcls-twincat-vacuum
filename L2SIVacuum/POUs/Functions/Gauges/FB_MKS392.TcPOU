<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MKS392" Id="{afeb32df-f2b5-4c42-9623-5607aedfb59f}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block implements the MKS392 gauge*)
FUNCTION_BLOCK FB_MKS392
VAR_INPUT
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    PG : ST_VG;
END_VAR
VAR
    rV : REAL;	// input voltage
    iTermBits: UINT := 32767 ; // The terminal's maximum value in bits
    (*IO*)
    i_iPRESS_R AT%I* :INT; // input Pressure // Link to analog Input
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Real-value calculation *)
rV := 10*INT_TO_REAL(PG.i_iPRESS_R)/iTermBits;
PG.rPRESS := (LREAL_TO_REAL(EXPT(10,(2*rV)-11)));


(* Pressure gauge State checks *)

IF rV >= 0.5 AND rV <= 3.5 THEN
    PG.eState := ValidLo; //LO
ELSIF rV > 3.5 AND rV<= 6.5 THEN
    PG.eState := ValidHi; //HIGH
ELSIF rV < 0.5 THEN
    PG.eState := GaugeDisconnected; //not on
ELSE
    PG.eState := PressInvalid; //other fault - could be no gauge, controller powering up etc
END_IF



(* Pressure gauge OK checks *)
PG.xPRESS_OK := (rV <=6.5 ) AND (rV>=0.5);


(* Setpoint evaluation *)
PG.xAT_VAC := PG.xPRESS_OK AND PG.rPRESS < PG.rVAC_SP;


(*Soft IO Linking*)
ACT_IO();
]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{593d1512-dea6-4556-9477-b1ad19e7c087}">
      <Implementation>
        <ST><![CDATA[PG.i_iPRESS_R :=i_iPRESS_R;

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>