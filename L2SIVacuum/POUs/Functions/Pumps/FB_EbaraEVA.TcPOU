<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_EbaraEVA" Id="{fcf97f55-51a9-4ad7-88f0-a45e9e26409c}" SpecialFunc="None">
    <Declaration><![CDATA[(*This function block does basic controls for the Ebara EV-A  pump. Turns off pump
in the event of errors/ warnings. Provides interlocking interface.*)
FUNCTION_BLOCK FB_EbaraEVA EXTENDS FB_Pump
VAR_INPUT
    i_xExtIlkOK	:	BOOL;
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    stPump	:	ST_EbaraEVA; //Ebara dry pump structure
END_VAR
VAR
  // For logging
  (*  fbLogger : FB_LogMessage := (eSubsystem:=E_SubSystem.VACUUM);
    ePrevState : E_PumpState;
    tErrorPresent : R_TRIG;
    tAction : R_TRIG; // Primary action of this device (OPN_DO, PUMP_RUN, etc.)
    tFault : F_TRIG;*)

(*IO*)
    q_xRunDo AT%Q* : BOOL; // Output signal
    q_xRemote At%Q* :BOOL;// Remote/Local Control
    q_xResetAlarm At%Q* :BOOL;// Remote/Local Control
    i_xAlarmOK AT%I* :BOOL; // Normally closed Alarm bit
    i_xIsRun   AT%I*:BOOL; // Input status
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*MG 2019*)
stPump.xIlkOK := i_xExtIlkOK AND stPump.i_xAlarmOK ;
// Enable the remote signal when the interlock evaluation is ok
//stPump.q_xRemote := stPump.xIlkOK;

IF stPump.xIlkOK THEN
    stPump.q_xRunDO := stPump.pv_xRunSW;
    stPump.q_xRemote := stPump.pv_xRunSW;
ELSE
        stPump.PV_xRunSW := FALSE;
        stPump.q_xRunDO := FALSE;
END_IF

(*State evaluation*)
IF NOT(stPump.i_xAlarmOK ) THEN
     ePrevState := stpump.eState;
    stpump.eState := pumpFAULT;
ELSIF NOT stpump.q_xRunDo AND stPump.i_xAlarmOK THEN
        stpump.eState := pumpSTOPPED;
ELSIF NOT stpump.q_xRunDo AND NOT stPump.i_xIsRun THEN
        stpump.eState := pumpSTARTING;
ELSIF stPump.i_xIsRun THEN
        stpump.eState := pumpRUNNING;
ELSE
    stpump.eState := pumpFAULT;
END_IF


//Soft IO Mapping
ACT_IO();

// Log States and triggers
ACT_Logger();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{1807940c-3fbb-4008-9507-5845d2fff7d5}">
      <Implementation>
        <ST><![CDATA[stPump.i_xAlarmOK:=	i_xAlarmOK;
stPump.xErr:=	NOT(i_xAlarmOK);
stPump.i_xIsRun := i_xIsRun;
(*outputs*)
q_xRunDo:=stPump.q_xRunDo;
q_xRemote:= stPump.q_xRemote;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{64314086-c648-4cbf-8914-c1f81f7a5c99}">
      <Implementation>
        <ST><![CDATA[// ILK logger
IF NOT i_xExtIlkOK AND ePrevState = pumpRUNNING THEN
         fbLogger(sMsg:='Lost external interlock while pump was running.', eSevr:=TcEventSeverity.Critical);
END_IF

//STATE Logger
IF ePrevState <> stpump.eState THEN
      CASE stpump.eState OF
        pumpFAULT:
            fbLogger(sMsg:='Pump Fault.', eSevr:=TcEventSeverity.Critical);
          pumpSTOPPED:
            fbLogger(sMsg:='Pump stopped.', eSevr:=TcEventSeverity.Critical);
        pumpSTARTING:
            fbLogger(sMsg:='Pump starting.', eSevr:=TcEventSeverity.Info);
        pumpRUNNING:
            fbLogger(sMsg:='Pump running.', eSevr:=TcEventSeverity.Info);
      END_CASE
      ePrevState := stpump.eState;
  END_IF

// Log Action
tAction(CLK:=  stPump.q_xRunDo);
IF tAction.Q THEN fbLogger(sMsg:='Pump commanded to start', eSevr:=TcEventSeverity.Info); END_IF


// Log FAULT
tFault(CLK:= stPump.i_xAlarmOK);
IF tFault.Q THEN fbLogger(sMsg:='Pump Lost Alarm OK bit', eSevr:=TcEventSeverity.Critical); END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>