<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PTM_TurboDrive" Id="{dfc77842-243a-4cfe-b1b5-b7fe350ab6a4}" SpecialFunc="None">
    <Declaration><![CDATA[(* This Function block provides basic turbo control for Leybold Turbo Drive 300, Turbo Drive 400 *)
(* TD20 Classic Via Remote X1 Connector 9-way PLC interface*)
(* When serial interface is implemented, call Method M_Serial_IO after fb instantiation, in order to add the serial status *)
FUNCTION_BLOCK FB_PTM_TurboDrive EXTENDS FB_Pump
VAR_INPUT
    i_xExtILKOk : BOOL; // Connect to external interlock logic, TRUE if not used.
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    iq_stPtm	:	ST_LeyboldPTM;
END_VAR
VAR

    xRunOk	:	BOOL;
    tofRemoteDelay	:	TOF;


    (*IO*)
    i_xAtSpd AT%I*: BOOL; // Normaml operation when true
    i_xFaultNC AT%I*: BOOL; // Error Active when no Error is present
    q_RunDO AT%Q*: BOOL; // Start/Stop
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Basic Turbo Control *)
(* This Function block provides basic turbo control for Leybold Turbo Drive 300, Turbo Drive 400 *)
(* TD20 Classic Via Remote X1 Connector 9-way PLC interface*)
(* M. Ghaly Jan. 2019 *)

(* Interlock Sum *)
iq_stPtm.xExtRunOk:= i_xExtILKOk;
xRunOk := iq_stPtm.xExtRunOk AND iq_stPtm.i_xNCError;

(* Basic pump supervisory section *)
IF xRunOk THEN
    q_RunDO := iq_stPTM.xRunSW;
ELSE
    iq_stPtm.xRunSW:=FALSE;
    q_RunDO:=FALSE;
END_IF

(*Pump States*)
IF (iq_stPtm.i_xFault) THEN
        iq_stPtm.eState := pumpFAULT;
        iq_stPtm.xRunSW:=FALSE;
        q_RunDO:=FALSE;
ELSIF (iq_stPtm.q_RunDO) AND (iq_stPtm.i_xAtSpd) THEN
        iq_stPtm.eState := pumpRUNNING;
ELSIF (iq_stPtm.q_RunDO) AND NOT (iq_stPtm.i_xAtSpd) THEN
        iq_stPtm.eState := pumpSTARTING;
ELSIF NOT (iq_stPtm.q_RunDO) THEN
        iq_stPtm.eState := pumpSTOPPED;
ELSE
    iq_stPtm.eState := pumpFAULT;
END_IF;


(*I/O soft mapping*)
ACT_IO();
// Log States and triggers
This^.ACT_Logger();
(*Load or save the persistent variables*)
ACT_Persistent();
]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{4cbb30e0-b539-45c8-81cf-4305f479bf38}">
      <Implementation>
        <ST><![CDATA[(*Inputs*)
iq_stPtm.i_xAtSpd := i_xAtSpd;
iq_stPtm.i_xNCError := i_xFaultNC;
iq_stPtm.i_xFault := NOT i_xFaultNC;



(*Outputs*)
iq_stPtm.q_RunDO := q_RunDO;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{073bd2d6-ebd0-490d-9b1c-198b6a637e83}">
      <Implementation>
        <ST><![CDATA[//STATE Logger
// ILK logger
IF NOT i_xExtIlkOK AND ePrevState = pumpRUNNING THEN
         fbLogger(sMsg:='Lost external interlock while pump was running.', eSevr:=TcEventSeverity.Critical);
END_IF


IF ePrevState <> iq_stPTM.eState THEN
      CASE iq_stPTM.eState OF
        pumpFAULT:
            fbLogger(sMsg:='Pump Fault.', eSevr:=TcEventSeverity.Critical);
          pumpSTOPPED:
            fbLogger(sMsg:='Pump stopped.', eSevr:=TcEventSeverity.Critical);
        pumpSTARTING:
            fbLogger(sMsg:='Pump starting.', eSevr:=TcEventSeverity.Info);
        pumpRUNNING:
            fbLogger(sMsg:='Pump running.', eSevr:=TcEventSeverity.Info);
      END_CASE
      ePrevState := iq_stPTM.eState;
  END_IF

// Log Action
tAction(CLK:=  iq_stPTM.q_RunDO);
IF tAction.Q THEN fbLogger(sMsg:='Pump commanded to start', eSevr:=TcEventSeverity.Info); END_IF


// Log FAULT
tFault(CLK:= NOT iq_stPTM.i_xFault);
IF tFault.Q THEN fbLogger(sMsg:='Pump Lost Alarm OK bit', eSevr:=TcEventSeverity.Critical); END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Persistent" Id="{a18751a8-c7b2-49db-bf38-fbf131781ece}">
      <Implementation>
        <ST><![CDATA[(*On first PLC pass, load the persistent value into the structrue variable*)
IF (SUPER^.bRestorePersistentData) THEN
    SUPER^.bRestorePersistentData	:= FALSE;
    IF (rBackingPressureSP <> 0) THEN
        iq_stPTM.rBackingPressureSP := rBackingPressureSP;
    END_IF;
    IF (rInletPressureSP <> 0) THEN
        iq_stPTM.rInletPressureSP := rInletPressureSP;
    END_IF;
END_IF
(*Check if a new value has been written in the structure variable copy it to the persistent variable*)
IF NOT (iq_stPTM.rBackingPressureSP = rBackingPressureSP) THEN
    rBackingPressureSP:= iq_stPTM.rBackingPressureSP;
END_IF;

IF NOT (iq_stPTM.rInletPressureSP = rInletPressureSP) THEN
    rInletPressureSP := iq_stPTM.rInletPressureSP;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_Run" Id="{ae64ab07-7d54-4df1-84b7-49ea57053e4e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Run : BOOL
VAR_INPUT
    run:bool; // set to true to run, false to stop;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
this^.iq_stPtm.xRunSW := run;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Serial_IO" Id="{a2c487da-83ca-4b36-90c2-38c653b8b422}">
      <Declaration><![CDATA[METHOD PUBLIC M_Serial_IO : BOOL
VAR_INPUT
    i_st_TD20_RBK			: ST_TD20Status;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(* This function block is used to map the IO points from the Oerlikon structures
to the generic turbo structures *)

(* Readbacks *)
iq_stPTM.i_xAccel := i_st_TD20_RBK.wStatusWord.4;
iq_stPTM.i_xDecel := i_st_TD20_RBK.wStatusWord.5;
//iq_stPTM.i_xAtSpd := i_st_TD20_RBK.wStatusWord.10;
iq_stPTM.i_xRemote := i_st_TD20_RBK.wStatusWord.15; (* Remote control enabled *)
iq_stPTM.i_diCurSpd := WORD_TO_DINT(i_st_TD20_RBK.wFrequency_P3);
iq_stPTM.i_rCurrentMon := WORD_TO_INT(i_st_TD20_RBK.wMotorCurrent_P5);
iq_stPTM.i_diPwr := WORD_TO_DINT(i_st_TD20_RBK.wMotorCurrent_P5 * i_st_TD20_RBK.wVoltage_P4);
iq_stPTM.i_diElecTemp := WORD_TO_DINT(i_st_TD20_RBK.wConverterTemp_P11);
iq_stPTM.i_rTempMon := WORD_TO_INT(i_st_TD20_RBK.wPumpTemp_P127);

(* Faults and warnings *)
//iq_stPTM.i_xFault := i_st_TD20_RBK.wStatusWord.3;
iq_stPTM.i_xTempFault := i_st_TD20_RBK.wStatusWord.7; (* specified as a temperature warning but it could be a fault *)
iq_stPTM.i_xWarn := i_st_TD20_RBK.wStatusWord.14; (* warning summary bit *)

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>