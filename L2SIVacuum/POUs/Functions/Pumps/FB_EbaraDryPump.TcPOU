<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_EbaraDryPump" Id="{fa5a85fd-eab5-4a2b-a440-c1a901955592}" SpecialFunc="None">
    <Declaration><![CDATA[(*This function block does basic controls for the Ebara EV-S Dry pump. Starts booster pump when appropriate. Turns off pump
in the event of errors/ warnings. Provides interlocking interface.*)
FUNCTION_BLOCK FB_EbaraDryPump EXTENDS FB_Pump
VAR_INPUT
    i_stBPGauge	:	ST_VG; //booster pump interlock gauge
    i_xVlvOpn	:	BOOL; //valve(s) to main system load are open
    i_xExtIlkOK	:	BOOL;

END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    stPump	:	ST_EbaraDryPump; //Ebara dry pump structure
END_VAR
VAR_IN_OUT

END_VAR
VAR
    (*IO*)
    q_xMPStart	AT%Q*:	BOOL; //Main Pump start
    q_xBPStart	AT%Q*:	BOOL; // Booster Pump start (this can be started by the pump automatically)
    //Readbacks
    i_xMPStatus	AT%I*:	BOOL; //MP status
    i_xBPStatus	AT%I*:	BOOL; //BP status
    i_xWarning	AT%I*:	BOOL; //Warning status
    i_xAlarmOK	AT%I*:	BOOL; //Alarm, maps to error
    i_xRemote	AT%I*:	BOOL; //Remote control status
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Ebara Dry Pump Control Routine
A. Wallace
2016-4-29
Applicable to:
EV-S20
EV-S50
EV-S100
EV-S200

Does basic controls for the pump. Starts booster pump when appropriate. Turns off pump
in the event of errors/ warnings. Provides interlocking interface.

Main Pump Operational Note:
Ebara recommends that the pump be exposed to the full system load after the main pump is running.

Booster Pump Operational Note:
The booster pump can either be started automatically by the pump itself (probably based on a timer?)
or it can be started by the PLC. The pressure setpoint is by default 30T. It may be wise to make
sure the pump was exposed to the full system load before starting the booster.

*)

//Mapping
ACT_IO();
stPump.xExtIlk := NOT i_xExtIlkOK;

//Interlock and error/warning
stPump.xIlkOK :=  NOT stPump.xExtIlk AND NOT (stpump.xErr);// OR stpump.xWrn);

//Start/ Stop the pump
IF stpump.xIlkOK THEN
    stpump.q_xMPStart := stpump.pv_xRunSW;
ELSE
    stpump.q_xMPStart := stpump.pv_xRunSW := FALSE;
END_IF

//Booster pump
stpump.xBPIlk := i_xVlvOpn AND stpump.i_xMPStatus AND (i_stBPGauge.rPRESS < stpump.rBPIlkSP) AND i_stbpgauge.xPRESS_OK;
stpump.tonBP(IN:=stpump.xBPIlk);
stpump.q_xBPStart := stpump.tonBP.Q;

(*State evaluation*)
IF stPump.i_xAlarm THEN
    stpump.eState := pumpFAULT;
ELSIF NOT stpump.q_xMPStart AND stPump.i_xAlarm THEN
        stpump.eState := pumpSTOPPED;
ELSIF stpump.q_xMPStart AND NOT stPump.i_xMPStatus THEN
        stpump.eState := pumpSTARTING;
ELSIF stPump.i_xMPStatus OR stPump.i_xBPStatus THEN
        stpump.eState := pumpRUNNING;
ELSIF NOT stPump.i_xMPStatus AND NOT stPump.i_xBPStatus THEN
        stpump.eState := pumpSTOPPED;
ELSE
    stpump.eState := pumpFAULT;
END_IF


//Mapping
ACT_IO();
// Log States and triggers
ACT_Logger();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{98533322-3808-41fc-88a0-2acd4df6d1ea}">
      <Implementation>
        <ST><![CDATA[(*Outputs*)
q_xMPStart	:= stPump.q_xMPStart;
q_xBPStart	:= stPump.q_xBPStart;
stPump.q_xRunDo := stPump.q_xMPStart;
(*Inputs*)
stPump.i_xMPStatus:=	i_xMPStatus;
stPump.i_xBPStatus:=	i_xBPStatus;
stPump.i_xWarning:= NOT i_xWarning;
// These are normally closed inputs
stPump.xWrn := NOT i_xWarning;
stPump.i_xAlarm:=	NOT(i_xAlarmOK);
StPump.xErr := NOT(i_xAlarmOK);
stPump.i_xRemote:= i_xRemote;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{3a00bf60-1d67-4437-aa8f-3c002baf8068}">
      <Implementation>
        <ST><![CDATA[// ILK logger
IF NOT i_xExtIlkOK AND ePrevState = pumpRUNNING THEN
         fbLogger(sMsg:='Lost external interlock while pump was running.', eSevr:=TcEventSeverity.Critical);
END_IF
//STATE Logger

IF ePrevState <> stpump.eState THEN
      CASE stpump.eState OF
        pumpFAULT:
            fbLogger(sMsg:='Pump Fault.', eSevr:=TcEventSeverity.Critical);
          pumpSTOPPED:
            fbLogger(sMsg:='Pump stopped.', eSevr:=TcEventSeverity.Critical);
        pumpSTARTING:
            fbLogger(sMsg:='Pump starting.', eSevr:=TcEventSeverity.Info);
        pumpRUNNING:
            fbLogger(sMsg:='Pump running.', eSevr:=TcEventSeverity.Info);
      END_CASE
      ePrevState := stpump.eState;
  END_IF


// Log Action
tAction(CLK:=  stPump.q_xRunDo);
IF tAction.Q THEN fbLogger(sMsg:='Pump commanded to start', eSevr:=TcEventSeverity.Info); END_IF


// Log FAULT
tFault(CLK:= NOT stPump.i_xAlarm);
IF tFault.Q THEN fbLogger(sMsg:='Pump Lost Alarm OK bit', eSevr:=TcEventSeverity.Critical); END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>