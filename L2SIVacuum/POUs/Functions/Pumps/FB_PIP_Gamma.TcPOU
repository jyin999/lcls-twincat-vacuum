<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PIP_Gamma" Id="{c735b214-fb8d-491c-9d35-e2f8609cfbf0}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block does basic controls FOR the ION pump connected to a Gamma QPCe controller.
 Provides interlocking interface. Enable HV only when interlock gauge press is less than 1.0E-4 Torr *)
{attribute 'reflection'}
FUNCTION_BLOCK FB_PIP_Gamma Extends FB_Pump
VAR_INPUT
    i_stGauge	:	ST_VG; //Ion or Pirani gauge for pump interlock
    i_xOverrideMode : BOOL; (*To be linked to global override bit. This Overrides Vacuum interlock logic*)
    tRecoverDelay:TIME:=T#900S; (*Delay Time after the first cycle to start the device. Default is 900S*)
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    stPump	:	ST_PIP; //Gamma Ion pump structure
    q_IG	:	ST_VG; //When ion pump is used as a measuring device for interlocking gate valves
END_VAR
VAR
 rPRESS : REAL;

 rV : REAL;
 timer:TON;

 (* IO Controls *)
 q_xHVEna_DO AT %Q*: BOOL;	// Enable High Voltage when TRUE
 i_iPRESS  AT %I*: INT;  //
 i_xSP_DI  AT %I* : BOOL; // NO contact //function of relay set on the QPC to HV output state

// For logging
tTimeOutAction : F_TRIG;
tOverrideActivated : R_TRIG;

tPumpStartTimeout : TON := (PT:=T#10s); // Timeout pump start if pressure < 1E-11 for more than 10s.
MinPressure : REAL:= 1E-11; // Minimum readback pressure, pump must register pressure above this to be considered running
stateTimer:TON;
//Overrides
    tonOvrd	:	TON;
    tonDelOK : TON;
    rtOK	:	R_TRIG;
    tOvrd	:	TIME := T#10s;

    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath: STRING;
    fbGetCurTaskIdx  : GETCURTASKINDEX;
    fbWritePersistentData           : WritePersistentData;
    tRecover: TON;
END_VAR
VAR CONSTANT
     rDefaultHVEna_SP : REAL :=1E-4; // Default protection setpoint as per the gamma QPCe manual
END_VAR
VAR PERSISTENT
    rHVEna_SP : REAL;
    bWasOn : BOOL;
    bAutoRecover:BOOL;
    bAutoRecoverWrite:BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Does Gamma Ion pump HV interlock. Enable HV only when interlock gauge press is less than 1.0E-4 Torr *)

(*Ensures the set point is not higher than 1.0E-4*)
IF (stPump.rHVEna_SP > rDefaultHVEna_SP) THEN
    stPump.rHVEna_SP := rDefaultHVEna_SP;
END_IF

(* Interlock *)
//stPump.xHV_ExtIlk  := i_stGauge.xPRESS_OK AND (i_stGauge.rPRESS <= stPump.rHVEna_SP);//AND NOT tPumpStartTimeout.Q); //ADP

(* Enable HV *)
IF i_stGauge.rPRESS <= stPump.rHVEna_SP AND i_stGauge.xPRESS_OK THEN
    stPump.q_xHVEna_DO := stPump.xHVEna_SW OR ((tonOvrd.Q AND i_xOverrideMode));
    stPump.xILKOk:= TRUE;
ELSIF stPump.q_xHVEna_DO (*AND timer.Q*) THEN
    IF q_IG.rPRESS > (stPump.rHVEna_SP + stPump.rHYS_PR) THEN // Ion pumps when running switches off based on their own pressure readings
        stPump.q_xHVEna_DO := FALSE;
        stPump.xHVEna_SW := FALSE;
        stPump.xILKOk := FALSE;
    ELSE
        stPump.q_xHVEna_DO := stPump.xHVEna_SW OR ((tonOvrd.Q AND i_xOverrideMode));
    END_IF
ELSIF (tonOvrd.Q AND i_xOverrideMode) THEN
    stPump.q_xHVEna_DO := TRUE;
ELSE
    stPump.q_xHVEna_DO  := FALSE;
    stPump.xHVEna_SW := FALSE;
    stPump.xILKOk := FALSE;
END_IF


//stPump.q_xHVEna_DO := stPump.xHVEna_SW AND stPump.xHV_ExtIlk;
//stPump.xHVEna_SW := stPump.q_xHVEna_DO;

timer(IN:= NOT stPump.q_xHVEna_DO, PT:= T#1s);

// TAW Experimental ion pump timeout
tPumpStartTimeout(IN:=(NOT stPump.i_xHV_DI AND stPump.q_xHVEna_DO));
tTimeOutAction(CLK:=tPumpStartTimeout.Q);
IF tTimeOutAction.Q THEN  fbLogger(sMsg:='Pump time out.', eSevr:=TcEventSeverity.Critical); END_IF



(*Pump STATE*)
IF tPumpStartTimeout.Q THEN //Pump timeout
    stPump.eState := pumpFAULT;
ELSIF stPump.q_xHVEna_DO AND NOT stPump.i_xHV_DI THEN
    stPump.eState := pumpSTARTING;
ELSIF NOT stPump.q_xHVEna_DO AND NOT stPump.i_xHV_DI THEN
    stPump.eState := pumpSTOPPED;
ELSIF stPump.q_xHVEna_DO AND stPump.i_xHV_DI THEN
    stPump.eState := pumpRUNNING;
ELSIF NOT stPump.q_xHVEna_DO AND stPump.i_xHV_DI THEN
    stPump.eState := pumpSTOPPING;
ELSE
    stPump.eState := pumpFAULT;
END_IF



(*Update output gauge values*)
ACT_SetGauge();
(*Soft IO Mapping*)
IO();
ACT_IlkOverride();
// Log States and triggers
ACT_Logger();
(*Load or save the persistent variables*)
ACT_Persistent();
(*Run Auto Recovery*)
ACT_Recover();]]></ST>
    </Implementation>
    <Action Name="ACT_IlkOverride" Id="{bcee683f-3211-4a69-9559-1cb72724e991}">
      <Implementation>
        <ST><![CDATA[(* Override logic *)
(* Goal: give ability to override, but do so in a way that people won't forget it.
Solution: Override only after ten seconds of override, protect against blips,
when the Pump permission goes true for more than ten seconds consistently, remove override
*)

tonDelOK(IN:=stPump.xILKOk, PT:=T#10S);
rtOK(CLK:=tonDelOK.Q);
IF rtOK.Q AND stPump.pv_xOvrdStart THEN
    stPump.pv_xOvrdStart :=FALSE;
    if (stPump.eState = pumpRUNNING) AND (i_xOverrideMode) THEN stPump.xHVEna_SW:= TRUE; END_IF
    //Log
    fbLogger(sMsg:='Override expired', eSevr:=TcEventSeverity.Warning);
END_IF
// Release the Force DO bit when the system override is false
IF NOT(i_xOverrideMode) THEN stPump.pv_xOvrdStart :=FALSE; END_IF
//Override timer
tonOvrd(IN:= stPump.pv_xOvrdStart, PT:=tOvrd);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{dd00b334-c786-42ee-ae98-6142e7f8ba70}">
      <Implementation>
        <ST><![CDATA[// ILK logger

IF NOT (stPump.xILKOk) AND ((ePrevState = pumpRUNNING) OR (ePrevState = pumpSTARTING)) AND NOT tonOvrd.Q THEN
    fbLogger(sMsg:='Pump turned off due to loss of interlock.', eSevr:=TcEventSeverity.Critical);
END_IF

//STATE Logger
IF ePrevState <> stPump.eState THEN
      CASE stPump.eState OF
        pumpFAULT:
            fbLogger(sMsg:='Pump Fault.', eSevr:=TcEventSeverity.Critical);
          pumpSTOPPED:
            fbLogger(sMsg:='Pump stopped.', eSevr:=TcEventSeverity.Critical);
        pumpSTARTING:
            fbLogger(sMsg:='Pump starting.', eSevr:=TcEventSeverity.Info);
        pumpRUNNING:
            fbLogger(sMsg:='Pump running.', eSevr:=TcEventSeverity.Info);
        pumpSTOPPING:
            fbLogger(sMsg:='Pump stopping.', eSevr:=TcEventSeverity.Info);
      END_CASE
      ePrevState := stPump.eState;
      stateTimer.IN := TRUE;
  END_IF


  // Log Action
tAction(CLK:=  stPump.q_xHVEna_DO);
IF tAction.Q THEN fbLogger(sMsg:='Pump commanded to start', eSevr:=TcEventSeverity.Info); END_IF
// Log override mode enabled
tOverrideActivated(CLK:= (tonOvrd.Q AND i_xOverrideMode));
IF tOverrideActivated.Q THEN fbLogger(sMsg:='Pump override mode activated', eSevr:=TcEventSeverity.Warning); END_IF


// Log FAULT
tFault(CLK:=  NOT tPumpStartTimeout.Q);
IF tFault.Q THEN fbLogger(sMsg:='Pump Fault', eSevr:=TcEventSeverity.Critical); END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Persistent" Id="{7aa78ade-aa19-4b96-ba64-eae2fa793f3b}">
      <Implementation>
        <ST><![CDATA[(*On first PLC pass, load the persistent value into the structrue variable*)
IF (SUPER^.bRestorePersistentData) THEN
    SUPER^.bRestorePersistentData	:= FALSE;
    IF (rHVEna_SP <> 0) THEN
        stPump.rHVEna_SP := rHVEna_SP;
    END_IF;
    IF ( bAutoRecoverWrite) THEN
        stPump.xAutoOn := bAutoRecover;
    END_IF;
END_IF
(*Check if a new value has been written in the structure variable copy it to the persistent variable*)
IF NOT (stPump.rHVEna_SP = rHVEna_SP) THEN
    rHVEna_SP := stPump.rHVEna_SP;
END_IF;
IF NOT(bAutoRecoverWrite) OR NOT (stPump.xAutoOn = bAutoRecover) THEN
    bAutoRecover := stPump.xAutoOn;
    bAutoRecoverWrite := TRUE;
END_IF;
stateTimer(PT:=T#10S);
IF (stateTimer.Q) THEN
    bWasOn := (stPump.eState = pumpRUNNING);
    stateTimer.IN := FALSE;
    fbWritePersistentData(NETID:='', PORT:=851, START:=TRUE, TMOUT:=T#1s );
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Recover" Id="{db71f277-6b1a-4048-ba14-ee322ccfb42c}">
      <Implementation>
        <ST><![CDATA[fbGetCurTaskIdx();
IF (TwinCAT_SystemInfoVarList._TaskInfo[fbGetCurTaskIdx.index].FirstCycle) THEN
    tRecover.IN := TRUE;
END_IF
tRecover(IN:= , PT:=tRecoverDelay);
IF NOT(bAutoRecoverWrite) OR (tRecover.Q AND bAutoRecover ) THEN
    This^.M_Recover();
    tRecover.IN := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SetGauge" Id="{7f72f23c-b05a-4919-b11f-c886c11a10b4}">
      <Implementation>
        <ST><![CDATA[(*MG*)
(* convert the analog input into readable pressure*)
(* use logarithmic Pressure calculation, Output= Normal and Offset = 0*)
rV := 10*INT_TO_REAL(i_iPress)/32767;
//Manual Page 9

if (stPump.bOutputInverted) THEN
    rPRESS := LREAL_TO_REAL(EXPT(10,(rV-stPump.iOffset)*-1));
ELSE
    rPRESS := LREAL_TO_REAL(EXPT(10,(rV-stPump.iOffset)));
END_IF
IF (stPump.q_xHVEna_DO) THEN
    q_IG.rPRESS := rPRESS;
    stPump.rPRESS := rPRESS;
END_IF


IF (stPump.i_xHV_DI) AND (q_IG.rPRESS < q_IG.rVAC_SP) THEN //ADP// AND (q_IG.rPRESS<>0) AND stPump.q_xHVEna_DO) THEN
    q_IG.xPRESS_OK := TRUE;
    ELSE
    q_IG.xPRESS_OK := FALSE;
END_IF

q_IG.sPath := This^.stPump.sPath;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="IO" Id="{a9e5b5c0-3557-4ce9-a1b9-765648e955e7}">
      <Implementation>
        <ST><![CDATA[stPump.sIlkDeviceName := This^.i_stGauge.sPath;
stPump.xError := (stPump.eState = pumpFAULT);
stPump.xOverrideMode := i_xOverrideMode;
(*inputs*)
stPump.i_iPRESS:=	i_iPRESS;
stPump.i_xHV_DI:=	i_xSP_DI;
(*output*)
q_xHVEna_DO:=  stPump.q_xHVEna_DO; //According to Manual pin should be grounded to activate function

 This^.stPump.sPath:= sPath;
 stPump.iAutoOnTimer:= TIME_TO_INT(tRecover.PT);]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_AutoOn" Id="{28cd0a93-5190-4d36-9dd8-bf794bc89b09}">
      <Declaration><![CDATA[METHOD M_AutoOn : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[this^.stPump.xAutoOn:= TRUE; // Pump is set to auto start when the pressure is low enough]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Recover" Id="{5e0c1637-4a6b-4d76-9605-1e098409d938}">
      <Declaration><![CDATA[METHOD M_Recover : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[This^.M_Run(This^.bWasOn);
M_Recover := bWasOn;
IF (bWasOn) THEN fbLogger(sMsg:='Auto Recovery Initiated.', eSevr:=TcEventSeverity.Info); END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Run" Id="{55fab705-c400-4b7f-9779-42233f752de0}">
      <Declaration><![CDATA[
METHOD PUBLIC M_Run : BOOL
VAR_INPUT
    run:bool; // set to true to run, false to stop;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
this^.stPump.xHVEna_SW := run;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>