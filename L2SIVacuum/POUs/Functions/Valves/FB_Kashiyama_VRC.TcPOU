<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="FB_Kashiyama_VRC" Id="{9bd36eef-72c0-4327-b6e1-2554c928689a}" SpecialFunc="None">
    <Declaration><![CDATA[(* Main Kashiyama gate valve permit to be open when:
        1. pump is NORMAL operating status, and
        2. chamber pressure is below HighSP or pump is at LowSpeed state.
    it will close if chamber pressure is below than lowSP for 180s.
*)
FUNCTION_BLOCK FB_Kashiyama_VRC
VAR_IN_OUT

END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := ' pv:'}
    q_stValve : ST_VRC;
END_VAR
VAR_INPUT
    Pump : ST_KashiyamaDryPump;//Kashyiama pump
    i_xExtILK_OK : BOOL; //Connect to Interlock logic condition(e.g F_TURBO_VRC_ILK Function), otherwise, Set to True if the valve is not interlocked
    Gauge : ST_VG;// Pressure Gauge
    i_xOverrideMode : BOOL;
END_VAR
VAR
    At_HiVac : BOOL;
    tmrTP : TP;
    tmrPT: TIME := T#180S;
    v1: BOOL;
    tonOvrd	:	TON;
    tonDelOK : TON;
    rtOK	:	R_TRIG;

    (*IO*)
    i_xOpnLS	AT%I*: BOOL;
    i_xClsLS	AT%I*: BOOL;
    q_xOPN_DO	AT%Q*: BOOL;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Main Kashiyama gate valve permit to be open when:
        1. pump is NORMAL operating status, and
        2. chamber pressure is below HighSP or pump is at LowSpeed state.
    it will close if chamber pressure is below than lowSP for 60s.
*)
(*
      For main Kayshiyama pump's gate valve:
        Pump LowSP is MU100 base pressure (20 mTorr)
        Pump HighSP is 600 Torr;
      Second Kayshiyama pump allow Gas Attenuator operating at higher pressure,
      it's gate valve is to be open when Gas Attenuator chamber pressure is above lowSP.
*)


///Check valve postion
IF NOT q_stValve.i_xClsLS AND q_stValve.i_xOpnLS THEN
    q_stValve.eState:=OPEN;
ELSIF q_stValve.i_xClsLS AND NOT q_stValve.i_xOpnLS THEN
    q_stValve.eState:=CLOSED;
ELSIF NOT q_stValve.i_xClsLS AND NOT q_stValve.i_xOpnLS THEN
    q_stValve.eState:=MOVING;
ELSE
    q_stValve.eState:=INVALID;
END_IF

//valve open interlock
q_stValve.xOPN_OK := Pump.i_xIsRun AND Pump.RdyTmr <= 0.0 AND (Gauge.rPRESS < Pump.HighSP OR Pump.q_xLspdDo) AND i_xExtILK_OK;


(* Override logic *)
(* Goal: give ability to override, but do so in a way that people won't forget it.
Solution: Override only after ten seconds of override, protect against blips,
when the valve permission goes true for more than ten seconds consistently, remove override
*)

tonDelOK(IN:=q_stValve.xOPN_OK, PT:=T#10S);
rtOK(CLK:=tonDelOK.Q);
IF rtOK.Q THEN q_stValve.pv_xOvrdOpn :=FALSE; END_IF

//Override timer
tonOvrd(IN:=q_stValve.pv_xOvrdOpn, PT:=T#10S);


(* Here's where the valve closes *)
IF NOT q_stValve.xOPN_OK AND NOT tonOvrd.Q THEN
q_stValve.pv_xOPN_SW := FALSE;
END_IF

At_HiVac := Gauge.xPRESS_OK AND Gauge.rPRESS < Pump.LowSP;
tmrTP (IN := At_HiVac AND q_stValve.q_xOPN_DO , PT := tmrPT);

IF At_HiVac AND q_stValve.q_xOPN_DO AND NOT tmrTP.Q THEN
    q_stValve.pv_xOPN_SW := FALSE ;
END_IF

(* Here's where the valve opens *)
q_stValve.q_xOPN_DO := (q_stValve.pv_xOPN_SW AND q_stValve.xOPN_OK) OR (tonOvrd.Q AND i_xOverrideMode);

(*Soft IO Mapping*)
ACT_IO();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{de178e5b-888c-4751-8f04-714b6ffa6001}">
      <Implementation>
        <ST><![CDATA[(*inputs*)
q_stValve.i_xOpnLS := 	i_xOpnLS;
q_stValve.i_xClsLS:=	i_xClsLS;
(*outputs*)
q_xOPN_DO:= q_stValve.q_xOPN_DO;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>