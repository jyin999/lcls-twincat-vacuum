<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_VCN_VAT590" Id="{4758ecab-cc0c-4c37-8981-9d3a1c0c082a}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function implements the Basic functions for the VAT590 needle valve*)
FUNCTION_BLOCK FB_VCN_VAT590 EXTENDS FB_Valve
VAR_INPUT
    bExtIlkOK : BOOL;        // External Interlock, SET to TRUE if not used
    IG : ST_VG;              // Input from a cold cathode gauge used in control loop
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    stVcnVat590	: ST_VCN_VAT590;       // Needle valve VAT590 structure
END_VAR
VAR CONSTANT
    cOpenPosition : REAL := 1E+5;      // Default position setpoint upper scale value
    cClosePosition : REAL := 0.0;      // Default position setpoint lower scale value
    cPresSPUpLim : REAL := 1E+6;       // Default pressure setpoint upper scale value
    cPresSPLowLim : REAL := 0;         // Default pressure setpoint lower scale value
    cPressCtrl : ST_CoEIndSub := (nIndex := 16#2199, nSubIndex := 0); // Selected pressure controller CoE register
    cSensorDelay_AD : ST_CoEIndSub := (nIndex := 16#219A, nSubIndex := 0); // Adaptive DS controller Sensor Delay CoE register
    cRampTime_AD : ST_CoEIndSub := (nIndex := 16#219B, nSubIndex := 0); // Adaptive DS controller Ramp Time CoE register
    cRampMode_AD : ST_CoEIndSub := (nIndex := 16#219C, nSubIndex := 0); // Adaptive DS controller Ramp Mode CoE register
    cGainFactor_AD : ST_CoEIndSub := (nIndex := 16#219E, nSubIndex := 0); // Adaptive DS controller Gain factor CoE register
    cRampTime_FIX1 : ST_CoEIndSub := (nIndex := 16#21A5, nSubIndex := 0); // Fixed 1 controller Ramp Time CoE register
    cRampMode_FIX1 : ST_CoEIndSub := (nIndex := 16#21A6, nSubIndex := 0); // Fixed 1 controller Ramp Mode CoE register
    cCtrlDir_FIX1 : ST_CoEIndSub := (nIndex := 16#21A7, nSubIndex := 0); // Fixed 1 controller Control Direction CoE register
    cPGain_FIX1 : ST_CoEIndSub := (nIndex := 16#21A8, nSubIndex := 0); // Fixed 1 controller P Gain CoE register
    cIGain_FIX1 : ST_CoEIndSub := (nIndex := 16#21A9, nSubIndex := 0); // Fixed 1 controller I Gain CoE register
    cRampTime_FIX2 : ST_CoEIndSub := (nIndex := 16#21AF, nSubIndex := 0); // Fixed 2 controller Ramp Time CoE register
    cRampMode_FIX2 : ST_CoEIndSub := (nIndex := 16#21B0, nSubIndex := 0); // Fixed 2 controller Ramp Mode CoE register
    cCtrlDir_FIX2 : ST_CoEIndSub := (nIndex := 16#21B1, nSubIndex := 0); // Fixed 2 controller Control Direction CoE register
    cPGain_FIX2 : ST_CoEIndSub := (nIndex := 16#21B2, nSubIndex := 0); // Fixed 2 controller P Gain CoE register
    cIGain_FIX2 : ST_CoEIndSub := (nIndex := 16#21B3, nSubIndex := 0); // Fixed 2 controller I Gain CoE register
    cRampTime_SP : ST_CoEIndSub := (nIndex := 16#21B9, nSubIndex := 0); // Soft Pump controller Ramp Time CoE register
    cRampMode_SP : ST_CoEIndSub := (nIndex := 16#21BA, nSubIndex := 0); // Soft Pump controller Ramp Time CoE register
    cPGain_SP : ST_CoEIndSub := (nIndex := 16#21BC, nSubIndex := 0); // Soft Pump controller Ramp Time CoE register
END_VAR
VAR
    fCalcPosSP : REAL := 0;
    fCalcPresSP : REAL := 0;
    eValveModeSP : E_ControlModeSP;
    fReqPos : REAL;                    // Requested position internal variable
    fReqPres : REAL;                   // Requested pressure internal variable
    fPresLowLim : REAL := 1E-10;       // Pressure sensor lower scale value
    fSlope : REAL := 1E+5;             // Slope (Units per decade) used for conversion from Torr units
    fVbase : REAL := 1E+5;             // Vbase (Units per decade) defined for how much the curve is shifted
    bRemAcsToggle : BOOL;              // Remote access control bit
    //timer for zero function
    tZeroTogg : TON := (PT := T#1S);
    //timer for remote function
    tRemAcsTogg : TON := (PT := T#500MS);
    //used for logging
    ePreviousState : E_VCN_VAT590;

    (*CoE Interface*)
    (*Link this to your VAT590 reference variables under InfoData.*)
    //Connect i_stVat590PlcDriveRef.aNetId to the VAT590 Valve InfoData^AdsAddr^netId
    //Connect i_stVat590PlcDriveRef.nSlaveAddr to the VAT590 Valve InfoData^AdsAddr^port
    i_stVat590PlcDriveRef AT %I*: ST_PlcDriveRef;
    stVat590DriveRef : ST_DriveRef;

    fbCoeRead : FB_CoERead_ByDriveRef;   // CoE Read function block
    fbCoeWrite : FB_CoEWrite_ByDriveRef; // CoE Write function block

    stCoeParamsInternal : ST_VAT590_COE;   // Internal storage of CoE parameters
    nCaseReadCoe : UINT := 1;          // Iterator for going through all CoE parameters
    rtCoeReset : R_TRIG;               // Rising edge trigger for reset CoE Interface error
    ftCoeReadBusy : F_TRIG;            // Falling edge trigger for CoE read new data
    ftCoeWriteBusy : F_TRIG;           // Falling edge trigger for CoE write data
    bFirstRead : BOOL := TRUE;         // FALSE after succesfull first readout of all CoE parameters

    (*VAT590 Ethercat IO Interface*)
    // Ethercat Interface Inputs
    i_nRawPosition       AT %I* : DINT;               // Position readback from the valve
    i_nRawPressure       AT %I* : DINT;               // Pressure readback from the valve
    i_eControlMode       AT %I* : E_ControlMode;      // Valve control mode readback
    i_eFatalError        AT %I* : E_FatalErrors;      // Valve Fatal Errors readback
    i_stGenStatus        AT %I* : ST_GeneralStatus;   // Valve General Status readback
    i_stGenWarnings      AT %I* : ST_GeneralWarnings; // Valve General Warnings readback
    i_stExtnWarnings     AT %I* : ST_ExtendedWarnings;// Valve Extended Warnings readback
    // Ethercat Interface Outputs
    o_nRawPositionSP     AT %Q* : DINT;               // Position setpoint
    o_nRawPressureSP     AT %Q* : DINT;               // Pressure setpoint
    o_eCtrlModeSP        AT %Q* : E_ControlModeSP;    // Valve control mode setpoint
    o_stGenCtrlSP        AT %Q* : ST_GeneralControlSP;// General Control setpoint
    (*Ethercat Interface Status Check*)
    (*Link this to your VAT590 WcState variable under WcState*)
    i_bValveEthCatStatus AT %I* : BOOL := TRUE;
END_VAR
VAR PERSISTENT
    fUpperLimit	: REAL;                // Max position in % that can be requested
    fPresMaxLim : REAL;                // Max pressure in Torr that can be requested
    fPresRbMaxLim : REAL;              // Max pressure in Torr read by chamber gauge, valve will close above the pressure.
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Needle valve control FB
J. Govednik 2021-11-22

This FB should be used as a low level control block.

It provides:
Valve position ceiling
Interlock
CoE Interface

It could be used for:
Valve position/flow linearization
*)

(*Set Coe Interface, AmsNetID, Slave address etc*)
SetCoeInterface();

(*Read from EPICS and Valve Ethercat interface*)
ReadFromInput();

(*Checking which Control mode is selected and if valve's communication is OK*)
IF stVcnVat590.bValveEthCatStatus THEN //If valve is not connected or something is wrong with EtherCAT communication PLC will set this bit to 1
    fReqPos := 0; //set req. position to 0
    eValveModeSP := E_ControlModeSP.CloseValve; //set control mode of the valve to CLOSE VALVE
    stVcnVat590.eValveControl := E_VCN_VAT590.CloseValve; //EPICS command hold in CloseValve state
    stVcnVat590.stValveStatus.eControlMode := E_ControlMode.FatalError; //override the readback from the valve because when valve is disconnected the value remains
    stVcnVat590.nRawPosition := 0; //override the readback from the valve because when valve is disconnected the value remains
    stVcnVat590.nRawPressure := 0; //override the readback from the valve because when valve is disconnected the value remains
ELSIF bExtIlkOK THEN
    CASE stVcnVat590.eValveControl OF
        E_VCN_VAT590.OpenValve:
            eValveModeSP := E_ControlModeSP.OpenValve;
        E_VCN_VAT590.CloseValve:
            eValveModeSP := E_ControlModeSP.CloseValve;
        E_VCN_VAT590.ManualControl:
            IF IG.xPRESS_OK AND IG.rPRESS <= fPresRbMaxLim THEN
                eValveModeSP := E_ControlModeSP.ManualControl;
            ELSE
                eValveModeSP := E_ControlModeSP.CloseValve; // Close valve if something is wrong with the gauge
                stVcnVat590.eValveControl := E_VCN_VAT590.CloseValve;
            END_IF
        E_VCN_VAT590.PressureControl:
            IF IG.xPRESS_OK AND IG.rPRESS <= fPresRbMaxLim THEN
                eValveModeSP := E_ControlModeSP.PressureControl;
            ELSE
                eValveModeSP := E_ControlModeSP.CloseValve; // Close valve if something is wrong with the gauge
                stVcnVat590.eValveControl := E_VCN_VAT590.CloseValve;
            END_IF
        E_VCN_VAT590.HoldValve:
            IF stVcnVat590.stValveStatus.eControlMode = E_ControlMode.ManualControl OR
                stVcnVat590.stValveStatus.eControlMode = E_ControlMode.PressureControl THEN
                eValveModeSP := E_ControlModeSP.HoldValve;
            END_IF
    END_CASE
ELSE
    fReqPos := 0;
    eValveModeSP := E_ControlModeSP.CloseValve;
    stVcnVat590.eValveControl := E_VCN_VAT590.CloseValve;
END_IF

(*Requested Position calculation*)
fReqPos := LIMIT(0, fReqPos, fUpperLimit);
fCalcPosSP := fReqPos * (cOpenPosition-cClosePosition)/100 + cClosePosition;
fCalcPosSP := LIMIT(cClosePosition, fCalcPosSP, cOpenPosition); //The requested position SP should remain within this range

(*Pressure calculation*)
//Limit the input from EPICS between upper and lower limit defined for seleceted pressure sensor
fReqPres := LIMIT(fPresLowLim, fReqPres, fPresMaxLim);

// Calculate pressure readback and pressure setpoint according to selected pressure gauge
CASE stVcnVat590.ePressureSensor OF
    E_VAT590_PressureSensor.MKS500:
        fPresLowLim := 1.0E-10;
        fSlope := 1E+5;
        fVbase := 1E+5;
        //Calcuate pressure setpoint
        fCalcPresSP := fSlope * LOG(fReqPres/fPresLowLim) + fVbase;
        fCalcPresSP := LIMIT(cPresSPLowLim, fCalcPresSP, cPresSPUpLim); //The requested pressure SP should remain within this range
        //Calculate pressure readback in Torr units
        stVcnVat590.fPressure := LREAL_TO_REAL(EXPT(10,((DINT_TO_REAL(stVcnVat590.nRawPressure)-fVbase)/fSlope + LOG(fPresLowLim))));
    ELSE
        fCalcPresSP := 0;
        stVcnVat590.fPressure := 0;
END_CASE

(*Calculated Pressure SP and Pressure readback is 0 if Pressure sensor is not working*)
IF NOT (IG.xPRESS_OK AND IG.rPRESS < fPresRbMaxLim ) THEN
    fCalcPresSP := 0;
    stVcnVat590.fPressure := 0;
END_IF

(*Zero function*)
IF stVcnVat590.stValveStatus.bZeroDisabled OR tZeroTogg.Q THEN
    stVcnVat590.bZero := FALSE;
END_IF
tZeroTogg.IN := stVcnVat590.bZero;
tZeroTogg();

(*Set Remote Access*)
IF stVcnVat590.stValveStatus.eRemoteStatus <> stVcnVat590.eRemoteControl THEN
    tRemAcsTogg.IN := TRUE;
    IF tRemAcsTogg.Q THEN
        bRemAcsToggle := NOT bRemAcsToggle;
        tRemAcsTogg.IN := FALSE;
    END_IF
END_IF
tRemAcsTogg();

(*Reset Coe Interface error*)
rtCoeReset(CLK := stVcnVat590.bResetCoeError);
IF rtCoeReset.Q THEN
    stVcnVat590.bResetCoeError := FALSE;
END_IF

(*Write CoE Parameters*)
WriteCoeParameters();

(*Read CoE Parameters*)
ReadCoeParameters();

(*Write to EPICS and Valve Ethercat interface*)
WriteToOutput();

(*Load or save the persistent variables*)
LoadPersistentData();

(*Logging*)
Logger();]]></ST>
    </Implementation>
    <Action Name="LoadPersistentData" Id="{e5168615-6ef3-4946-b318-5dac9816d744}">
      <Implementation>
        <ST><![CDATA[(*On first PLC pass, load the persistent value into the structrue variable*)
IF (bRestorePersistentData) THEN
    bRestorePersistentData	:= FALSE;
    IF (fUpperLimit <> 0) THEN
        stVcnVat590.fPosSetLimit := fUpperLimit;
    END_IF;
    IF (fPresMaxLim <> 0) THEN
        stVcnVat590.fPresSetLimit := fPresMaxLim;
    END_IF;
    IF (fPresRbMaxLim <> 0) THEN
        stVcnVat590.fPresRdbkLimit := fPresRbMaxLim;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Logger" Id="{e05977be-b3df-4692-b1e1-f426b01665a8}">
      <Implementation>
        <ST><![CDATA[// ILK logger
IF NOT (stVcnVat590.bIlkOK ) AND NOT(ePreviousState = E_VCN_VAT590.CloseValve) THEN
         fbLogger(sMsg:='Lost interlock ok bit while valve was open.', eSevr:=TcEventSeverity.Critical);
END_IF


//Control STATE Logger
IF ePreviousState <> stVcnVat590.eValveControl THEN
      CASE stVcnVat590.eValveControl OF
        E_VCN_VAT590.ManualControl:
            fbLogger(sMsg:='Valve in manual control mode.', eSevr:=TcEventSeverity.Warning);
        E_VCN_VAT590.HoldValve:
            fbLogger(sMsg:='Valve in hold control mode.', eSevr:=TcEventSeverity.Warning);
        E_VCN_VAT590.OpenValve:
            fbLogger(sMsg:='Valve Open.', eSevr:=TcEventSeverity.Info);
        E_VCN_VAT590.PressureControl:
            fbLogger(sMsg:='Valve in pressure control mode.', eSevr:=TcEventSeverity.Info);
        E_VCN_VAT590.CloseValve:
            fbLogger(sMsg:='Valve closed.', eSevr:=TcEventSeverity.Info);
      END_CASE
      ePreviousState := stVcnVat590.eValveControl;
  END_IF


// Log valve open
tAction(CLK:= (stVcnVat590.eValveControl = E_VCN_VAT590.OpenValve) );
IF tAction.Q THEN fbLogger(sMsg:='Valve commanded to fully open', eSevr:=TcEventSeverity.Info); END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ReadCoeParameters" Id="{dceab739-9779-4d3e-8c12-eb434a1eb90a}">
      <Implementation>
        <ST><![CDATA[CASE nCaseReadCoe OF
    0:
        stVcnVat590.bCoeError := TRUE;
        IF rtCoeReset.Q THEN
            nCaseReadCoe := 1;
            stVcnVat590.bCoeError := FALSE;
            bFirstRead := TRUE; // Set bFirstRead after Coe interface reset
        END_IF
    1:
        fbCoeRead.nIndex := cPressCtrl.nIndex;
        fbCoeRead.nSubIndex := cPressCtrl.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.ePIDCtrl);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.ePIDCtrl);
        fbCoeRead.bExecute := TRUE;
    2:
        fbCoeRead.nIndex := cSensorDelay_AD.nIndex;
        fbCoeRead.nSubIndex := cSensorDelay_AD.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fSensorDelay_AD);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fSensorDelay_AD);
        fbCoeRead.bExecute := TRUE;
    3:
        fbCoeRead.nIndex := cRampTime_AD.nIndex;
        fbCoeRead.nSubIndex := cRampTime_AD.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_AD);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_AD);
        fbCoeRead.bExecute := TRUE;
    4:
        fbCoeRead.nIndex := cRampMode_AD.nIndex;
        fbCoeRead.nSubIndex := cRampMode_AD.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_AD);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_AD);
        fbCoeRead.bExecute := TRUE;
    5:
        fbCoeRead.nIndex := cGainFactor_AD.nIndex;
        fbCoeRead.nSubIndex := cGainFactor_AD.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fGainFactor_AD);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fGainFactor_AD);
        fbCoeRead.bExecute := TRUE;
    6:
        fbCoeRead.nIndex := cRampTime_FIX1.nIndex;
        fbCoeRead.nSubIndex := cRampTime_FIX1.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_FIX1);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_FIX1);
        fbCoeRead.bExecute := TRUE;
    7:
        fbCoeRead.nIndex := cRampMode_FIX1.nIndex;
        fbCoeRead.nSubIndex := cRampMode_FIX1.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_FIX1);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_FIX1);
        fbCoeRead.bExecute := TRUE;
    8:
        fbCoeRead.nIndex := cCtrlDir_FIX1.nIndex;
        fbCoeRead.nSubIndex := cCtrlDir_FIX1.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bCtrlDir_FIX1);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bCtrlDir_FIX1);
        fbCoeRead.bExecute := TRUE;
    9:
        fbCoeRead.nIndex := cPGain_FIX1.nIndex;
        fbCoeRead.nSubIndex := cPGain_FIX1.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fPGain_FIX1);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_FIX1);
        fbCoeRead.bExecute := TRUE;
    10:
        fbCoeRead.nIndex := cIGain_FIX1.nIndex;
        fbCoeRead.nSubIndex := cIGain_FIX1.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fIGain_FIX1);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fIGain_FIX1);
        fbCoeRead.bExecute := TRUE;
    11:
        fbCoeRead.nIndex := cRampTime_FIX2.nIndex;
        fbCoeRead.nSubIndex := cRampTime_FIX2.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_FIX2);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_FIX2);
        fbCoeRead.bExecute := TRUE;
    12:
        fbCoeRead.nIndex := cRampMode_FIX2.nIndex;
        fbCoeRead.nSubIndex := cRampMode_FIX2.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_FIX2);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_FIX2);
        fbCoeRead.bExecute := TRUE;
    13:
        fbCoeRead.nIndex := cCtrlDir_FIX2.nIndex;
        fbCoeRead.nSubIndex := cCtrlDir_FIX2.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bCtrlDir_FIX2);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bCtrlDir_FIX2);
        fbCoeRead.bExecute := TRUE;
    14:
        fbCoeRead.nIndex := cPGain_FIX2.nIndex;
        fbCoeRead.nSubIndex := cPGain_FIX2.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fPGain_FIX2);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_FIX2);
        fbCoeRead.bExecute := TRUE;
    15:
        fbCoeRead.nIndex := cIGain_FIX2.nIndex;
        fbCoeRead.nSubIndex := cIGain_FIX2.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fIGain_FIX2);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fIGain_FIX2);
        fbCoeRead.bExecute := TRUE;
    16:
        fbCoeRead.nIndex := cRampTime_SP.nIndex;
        fbCoeRead.nSubIndex := cRampTime_SP.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_SP);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_SP);
        fbCoeRead.bExecute := TRUE;
    17:
        fbCoeRead.nIndex := cRampMode_SP.nIndex;
        fbCoeRead.nSubIndex := cRampMode_SP.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_SP);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_SP);
        fbCoeRead.bExecute := TRUE;
    18:
        fbCoeRead.nIndex := cPGain_SP.nIndex;
        fbCoeRead.nSubIndex := cPGain_SP.nSubIndex;
        fbCoeRead.pDstBuf := ADR(stVcnVat590.stCoeParameters.fPGain_SP);
        fbCoeRead.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_SP);
        fbCoeRead.bExecute := TRUE;
END_CASE

ftCoeReadBusy(CLK:=fbCoeRead.bBusy);
IF ftCoeReadBusy.Q THEN
    fbCoeRead.bExecute := FALSE;
    IF NOT fbCoeRead.bError THEN
        nCaseReadCoe := nCaseReadCoe + 1;
        IF nCaseReadCoe > 18 THEN
            nCaseReadCoe := 1;
            bFirstRead := FALSE; // Reset bFirstRead after successfull readout of all parameters
        END_IF
    ELSE
        nCaseReadCoe := 0; // Go to Error state
    END_IF
END_IF

fbCoeRead();
stCoeParamsInternal := stVcnVat590.stCoeParameters; //Save current values to internal structure]]></ST>
      </Implementation>
    </Action>
    <Action Name="ReadFromInput" Id="{2b46db7d-12fe-424a-afdf-e2d60ed01bdb}">
      <Implementation>
        <ST><![CDATA[(*Read from EPICS*)
fUpperLimit := LIMIT(0, stVcnVat590.fPosSetLimit, 100);
fPresMaxLim := LIMIT(1.0E-10, stVcnVat590.fPresSetLimit, 1.0E-2);
fPresRbMaxLim := LIMIT(1.0E-10, stVcnVat590.fPresRdbkLimit, 1.0E-2);
fReqPos := LIMIT(0, stVcnVat590.fReqPosition, 100);
fReqPres := LIMIT(1.0E-10, stVcnVat590.fReqPressure, 1.0E-2);

(*Read from VAT valve*)
stVcnVat590.stValveStatus.eControlMode := i_eControlMode;
stVcnVat590.stValveStatus.eFatalErrors := i_eFatalError;
stVcnVat590.nRawPosition := i_nRawPosition;
stVcnVat590.nRawPressure := i_nRawPressure;
//Mapping General statuses
stVcnVat590.stValveStatus.bFieldBusDatavalid := i_stGenStatus.Bit0FieldBusDatavalid;
stVcnVat590.stValveStatus.bZeroExecuted := i_stGenStatus.Bit1ZeroExecuted;
stVcnVat590.stValveStatus.bPingPongRxBit := i_stGenStatus.Bit2PingPongRxBit;
stVcnVat590.stValveStatus.bPressureSimulation := i_stGenStatus.Bit3PressureSimulation;
stVcnVat590.stValveStatus.bPressureSPReached := i_stGenStatus.Bit4PressureSPReached;
stVcnVat590.stValveStatus.bWarningsActive := i_stGenStatus.Bit9WarningsActive;
//Read Remote status
stVcnVat590.stValveStatus.eRemoteStatus.0 := i_stGenStatus.Bit7AccessModeBit0;
stVcnVat590.stValveStatus.eRemoteStatus.1 := i_stGenStatus.Bit8AccessModeBit1;
//Mapping General warnings
stVcnVat590.stValveStatus.bServiceRequest := i_stGenWarnings.Bit0ServiceRequest;
stVcnVat590.stValveStatus.bPowerFailureBattery := i_stGenWarnings.Bit3PowerFailureBattery;
stVcnVat590.stValveStatus.bSensMeasUnitFault := i_stGenWarnings.Bit10SensMeasUnitFault;
//Mapping Extended warnings
stVcnVat590.stValveStatus.bRemoteControlNotPossible := i_stExtnWarnings.Bit0RemoteControlNotPossible;
stVcnVat590.stValveStatus.bControlModeSPNotAllowed := i_stExtnWarnings.Bit1ControlModeSPNotAllowed;
stVcnVat590.stValveStatus.bZeroDisabled := i_stExtnWarnings.Bit2ZeroDisabled;
stVcnVat590.stValveStatus.bPFODeactivated := i_stExtnWarnings.Bit3PFODeactivated;
stVcnVat590.stValveStatus.bPressureSPOutOfRange := i_stExtnWarnings.Bit5PressureSPOutOfRange;
stVcnVat590.stValveStatus.bPositionSPOutOfRange := i_stExtnWarnings.Bit6PositionSPOutOfRange;
stVcnVat590.stValveStatus.bCtrlSPOutOfRange := i_stExtnWarnings.Bit10CtrlSPOutOfRange;
stVcnVat590.stValveStatus.bGeneralCtrlSPOutOfRange := i_stExtnWarnings.Bit11GeneralCtrlSPOutOfRange;
stVcnVat590.stValveStatus.bProcDataSettingsNotvalid := i_stExtnWarnings.Bit12ProcDataSettingsNotvalid;
//Mapping WcState - Valve Ethercat Status
stVcnVat590.bValveEthCatStatus := i_bValveEthCatStatus;]]></ST>
      </Implementation>
    </Action>
    <Action Name="SetCoeInterface" Id="{8fba1572-d062-4a30-8a85-24af9871d9c6}">
      <Implementation>
        <ST><![CDATA[stVat590DriveRef.sNetId := F_CreateAmsNetId(i_stVat590PlcDriveRef.aNetId);
stVat590DriveRef.nSlaveAddr := i_stVat590PlcDriveRef.nSlaveAddr;
stVat590DriveRef.nDriveNo := i_stVat590PlcDriveRef.nDriveNo;
stVat590DriveRef.nDriveType := i_stVat590PlcDriveRef.nDriveType;
fbCoeRead.stDriveRef := stVat590DriveRef;
fbCoeWrite.stDriveRef := stVat590DriveRef;]]></ST>
      </Implementation>
    </Action>
    <Method Name="SetThrottle" Id="{bc87ba94-efcb-4d7b-ace0-cb07482f478f}">
      <Declaration><![CDATA[METHOD SetThrottle : BOOL
VAR_INPUT
    rUpperLimit	:	REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stVcnVat590.fPosSetLimit := LIMIT(0, rUpperLimit, 100);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValveControl" Id="{25066385-eb5f-47fb-8ac4-a5fcdc50740f}">
      <Declaration><![CDATA[METHOD ValveControl : BOOL
VAR_INPUT
    state : E_VCN_VAT590; // Set Control modes
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stVcnVat590.eValveControl := state;]]></ST>
      </Implementation>
    </Method>
    <Action Name="WriteCoeParameters" Id="{9f7f239a-46a5-4609-b528-6b15a6fa6552}">
      <Implementation>
        <ST><![CDATA[// User will change one parameter at a time so solution with ELSIF should work OK
IF stVcnVat590.bCoeError THEN
    IF rtCoeReset.Q THEN
        stVcnVat590.bCoeError := FALSE;
    END_IF;
ELSIF bFirstRead THEN
    ;//Wait until first readout of all CoE parameters is completed
ELSIF stVcnVat590.stCoeParameters.ePIDCtrl <> stCoeParamsInternal.ePIDCtrl THEN
    fbCoeWrite.nIndex := cPressCtrl.nIndex;
    fbCoeWrite.nSubIndex := cPressCtrl.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.ePIDCtrl);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.ePIDCtrl);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fSensorDelay_AD <> stCoeParamsInternal.fSensorDelay_AD THEN
    fbCoeWrite.nIndex := cSensorDelay_AD.nIndex;
    fbCoeWrite.nSubIndex := cSensorDelay_AD.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fSensorDelay_AD);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fSensorDelay_AD);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fRampTime_AD <> stCoeParamsInternal.fRampTime_AD THEN
    fbCoeWrite.nIndex := cRampTime_AD.nIndex;
    fbCoeWrite.nSubIndex := cRampTime_AD.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_AD);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_AD);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bRampMode_AD <> stCoeParamsInternal.bRampMode_AD THEN
    fbCoeWrite.nIndex := cRampMode_AD.nIndex;
    fbCoeWrite.nSubIndex := cRampMode_AD.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_AD);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_AD);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fGainFactor_AD <> stCoeParamsInternal.fGainFactor_AD THEN
    fbCoeWrite.nIndex := cGainFactor_AD.nIndex;
    fbCoeWrite.nSubIndex := cGainFactor_AD.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fGainFactor_AD);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fGainFactor_AD);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fRampTime_FIX1 <> stCoeParamsInternal.fRampTime_FIX1 THEN
    fbCoeWrite.nIndex := cRampTime_FIX1.nIndex;
    fbCoeWrite.nSubIndex := cRampTime_FIX1.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_FIX1);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_FIX1);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bRampMode_FIX1 <> stCoeParamsInternal.bRampMode_FIX1 THEN
    fbCoeWrite.nIndex := cRampMode_FIX1.nIndex;
    fbCoeWrite.nSubIndex := cRampMode_FIX1.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_FIX1);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_FIX1);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bCtrlDir_FIX1 <> stCoeParamsInternal.bCtrlDir_FIX1 THEN
    fbCoeWrite.nIndex := cCtrlDir_FIX1.nIndex;
    fbCoeWrite.nSubIndex := cCtrlDir_FIX1.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bCtrlDir_FIX1);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bCtrlDir_FIX1);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fPGain_FIX1 <> stCoeParamsInternal.fPGain_FIX1 THEN
    fbCoeWrite.nIndex := cPGain_FIX1.nIndex;
    fbCoeWrite.nSubIndex := cPGain_FIX1.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fPGain_FIX1);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_FIX1);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fIGain_FIX1 <> stCoeParamsInternal.fIGain_FIX1 THEN
    fbCoeWrite.nIndex := cIGain_FIX1.nIndex;
    fbCoeWrite.nSubIndex := cIGain_FIX1.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fIGain_FIX1);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fIGain_FIX1);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fRampTime_FIX2 <> stCoeParamsInternal.fRampTime_FIX2 THEN
    fbCoeWrite.nIndex := cRampTime_FIX2.nIndex;
    fbCoeWrite.nSubIndex := cRampTime_FIX2.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_FIX2);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_FIX2);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bRampMode_FIX2 <> stCoeParamsInternal.bRampMode_FIX2 THEN
    fbCoeWrite.nIndex := cRampMode_FIX2.nIndex;
    fbCoeWrite.nSubIndex := cRampMode_FIX2.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_FIX2);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_FIX2);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bCtrlDir_FIX2 <> stCoeParamsInternal.bCtrlDir_FIX2 THEN
    fbCoeWrite.nIndex := cCtrlDir_FIX2.nIndex;
    fbCoeWrite.nSubIndex := cCtrlDir_FIX2.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bCtrlDir_FIX2);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bCtrlDir_FIX2);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fPGain_FIX2 <> stCoeParamsInternal.fPGain_FIX2 THEN
    fbCoeWrite.nIndex := cPGain_FIX2.nIndex;
    fbCoeWrite.nSubIndex := cPGain_FIX2.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fPGain_FIX2);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_FIX2);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fIGain_FIX2 <> stCoeParamsInternal.fIGain_FIX2 THEN
    fbCoeWrite.nIndex := cIGain_FIX2.nIndex;
    fbCoeWrite.nSubIndex := cIGain_FIX2.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fIGain_FIX2);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fIGain_FIX2);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fRampTime_SP <> stCoeParamsInternal.fRampTime_SP THEN
    fbCoeWrite.nIndex := cRampTime_SP.nIndex;
    fbCoeWrite.nSubIndex := cRampTime_SP.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fRampTime_SP);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fRampTime_SP);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.bRampMode_SP <> stCoeParamsInternal.bRampMode_SP THEN
    fbCoeWrite.nIndex := cRampMode_SP.nIndex;
    fbCoeWrite.nSubIndex := cRampMode_SP.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.bRampMode_SP);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.bRampMode_SP);
    fbCoeWrite.bExecute := TRUE;
ELSIF stVcnVat590.stCoeParameters.fPGain_SP <> stCoeParamsInternal.fPGain_SP THEN
    fbCoeWrite.nIndex := cPGain_SP.nIndex;
    fbCoeWrite.nSubIndex := cPGain_SP.nSubIndex;
    fbCoeWrite.pSrcBuf := ADR(stVcnVat590.stCoeParameters.fPGain_SP);
    fbCoeWrite.cbBufLen := SIZEOF(stVcnVat590.stCoeParameters.fPGain_SP);
    fbCoeWrite.bExecute := TRUE;
END_IF

ftCoeWriteBusy(CLK:=fbCoeWrite.bBusy);
IF ftCoeWriteBusy.Q THEN
    fbCoeWrite.bExecute := FALSE;
    IF fbCoeWrite.bError THEN
        stVcnVat590.bCoeError := TRUE;
    END_IF
END_IF

fbCoeWrite();]]></ST>
      </Implementation>
    </Action>
    <Action Name="WriteToOutput" Id="{d6e20cf1-2c45-411b-b669-d1005d8dcb97}">
      <Implementation>
        <ST><![CDATA[(*Write to EPICS*)
stVcnVat590.bIlkOK := bExtIlkOK;
stVcnVat590.nPositionSP := REAL_TO_DINT(fCalcPosSP);
stVcnVat590.nPressureSP := REAL_TO_DINT(fCalcPresSP);
stVcnVat590.fReqPosition := fReqPos;
stVcnVat590.fReqPressure := fReqPres;
stVcnVat590.fPresSetLimit := fPresMaxLim;
stVcnVat590.fPosSetLimit := fUpperLimit;

(*Write to VAT valve*)
o_eCtrlModeSP := eValveModeSP;
o_nRawPositionSP := REAL_TO_DINT(fCalcPosSP);
o_nRawPressureSP := REAL_TO_DINT(fCalcPresSP);
o_stGenCtrlSP.Bit0ExecuteZero := stVcnVat590.bZero;
o_stGenCtrlSP.Bit4AccessMode := bRemAcsToggle;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>